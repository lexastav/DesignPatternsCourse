using B.Oserver.Pattern.Observable;
using B.Oserver.Pattern.Observer;
using System;

namespace B.Oserver
{
    //Паттерн Наблюдатель представляет собой поведенческий шаблон проектирования, который использует отношение
    //"один ко многим". Вэтом отношении есть один наблюаемый объект и множество наблядателей. И при изменении наблядаемого
    //объекта автоматически происходит оповещение всех наблядателей. Этот паттерн еще называют Publisher-Subscriber.

    //Ну например, многие подписываются на e-mail рассылку какого-нибудь сайта, сайт-издатель с помощью этой рассылки
    //уведомляюет подписчиков об изменениях. А подписчики, получив эту информацию, производят определенные действия:
    //могут зайти на сайт, а могут и проигнорировать и тд.

    //Ну или более конкретно. Вот у нас есть биржа- наблюдаемый объект (представлен интерфейсом IObservable), и пара
    //наблюдателей- некий брокер и некий банк (представлены интерфейсом IObserver). В Классе биржа мы определили
    //метод имитирующий торги и инкапсулирует всю инфу о валютных курсах в нашей модели (StockInfo). После проведения
    //торгов производится уведомление всех наблюдателей.
    //Наблюдатель же должен реализовать метод некий метод обновления котировок (этот метод и задекларирован в интерфейсе).
    //Метод принимает некий объект. Сама реализация подразумевает, что мы получаем через данный параметр объект нашей
    //модели с текущей информацией о торгах и произведение некоторых действий, в нашем случае- купить/продать доллары и 
    //евро. Нам надо информировать наблюдателей о состоянии наблюдаемого объекта и как раз это состояние заключено в модели
    //то есть в объекте StockInfo. Одним из вариантов информирования наблюдателя о состоянии является push-модель,
    //при которой наблюдаемый объект передает данные о своем состоянии, то есть передаем в виде параметра метода
    //обновления. (Альтернативным способом получения информации о состоянии может быть pull-модель, это когда наблюдатель
    //сам вытягивает состояние из наблюдаемого объекта.)
    //Ну и так же мы в наблюдателях мы реализовали метод, позволяющий отписаться и перестать быть наблюдателем.
    class Program
    {
        static void Main(string[] args)
        {
            Stock stock = new Stock();
            Bank bank = new Bank("Сбербанк", stock);
            Broker broker = new Broker("Алексндр П", stock);

            //иммитируем торги
            stock.Market();
            //брокер прекращает наблюдение
            broker.StopTrade();
            //иммитируем торги
            stock.Market();

            Console.ReadLine();
        }
    }
}
