using System;
using A.Strategy.Pattern;

namespace A.Strategy
{
    //Стратегия- представляет собой шаблон проектирования, который определяет набор алгоритмов, инкапсулирует каждый
    //из них и обеспечивает их взаимо заменяемость. В зависимости от ситуации мы можем легко заменить один используемый
    //алгоритм другим. При этом замена алгоритма происходит независимо от объекта, который использует данный алгоритм.

    //Притянутый за уши пример. Вот есть различные легковые автомобили, которые используют различные источники энергии
    //для двигателей: бензин, электричество, солярка и тд. Есть гибридные автомобили. Короче говоря они похожи и отличаются
    //источником энергии. Ну и предположим, что мы можем так же модифицировть автомобиль и изменять источники энергии.
    //Вот в такой вот ситуации можно применить паттерн стратегия.

    //Для начала определим интерфейс, декларирующий поведение, то есть на чем ездит машина. Затем нам понадобится
    //реализации этого интерфейса, то есть конкретные виды источника энергии (семейство алгооритмов), ну а сами
    //алгоритмы будет использовать класс машина.

    class Program
    {
        static void Main(string[] args)
        {
            Car car = new Car(4, "BMW", new PetrolType());
            car.TypeEngine();

            Console.ReadLine();

            car.EngineTypeble = new ElectricType();
            car.TypeEngine();
        }
    }
}
