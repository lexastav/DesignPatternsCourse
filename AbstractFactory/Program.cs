using System;
using B.AbstractFactory.Pattern;
using B.AbstractFactory.Pattern.HeroFactories;

// Абстрактная фабрика. Паттерн прелоставляет интерфейс для создания семейства взаимосвязанных объектов с определенными
// интерфейсами без указания конкретных типов данных объектов.
// А теперь по человечески. Вот допустим нам нужно сделать игру, где игрок должен управлять некими героями, при этом
// каждый герой имеет определенное оружее и определенный способ передвижения, например вот человек имеет меч и его способ
// передвижения - бег, а эльф имеет арбалет и его способ передвижения- полёт. Таким образом у нас получается, что сущность
// оружия и способ передвижения являются взаимосвязанными и используются в комплексе, то есть эльф не может летать с мечом,
// а человек не может бегать с арбалетом.
// И вот, наша задача при проектировании игры абстрагировать создание героев от самого класса героя, что бы создать более
// гибкую архитектуру.

//И так у нас есть класс героя. Объект этого класса может иметь какое-то оружие и какой-то способ передвижения, эти
//данные передаются в класс через конструктор, в котором мы и указываем, что создавать героя будет конкретная фабрика.
//Фабрик может быть несколько, в нашем случае это фабрика создающая людей и фабрика создающая эльфов, таких фабрик может
//быть сколь угодное каличество, все зависит от фантазии, но все они должны реализовывать абстрактную фабрику, которая
//и декларирует, как например в нашем случае, то что герой должен иметь оружие и способ передвижения, а какое именно
//оружие и какой именно способ передвижения как раз вот и реализует конкретная фабрика.В свою очередь конкретное
//оружие и конкретный способ передвижения то же являются реализацией некоего абстрактного оружия и абстрактного
//способа передвижения.
//Мы можем легко комбинировать, например, мы расширяем игру и добавляем нового героя- гнома, который бегает
//и стреляет из арбалета, как не трудно догадаться уже, мы создаем конкретную фабрику, которая будет делать таких гномов.

//От сюда можно сделать вывод, что паттерн Абстрактная фабрика стоит применять, если:
// 1) Наша система не должна зависеть от способа создания и компноновки новых объектов.
// 2) Когда создаваемые объекты должны использоваться вместе и являются взаимосвязанными (оружие и способ передвижения
// в нашем примере).

//Ну и недостаток данного паттерна в том, что построенную на его основе систему довольно тяжело расширять. Если проблем
//с созданием новых конкретных фабрик нет, то вот если мы захотим добавить новую конфигурацию, например, тип одежы,
//придется переделывать классы фабрик и класс героя.

namespace AbstractFactory
{
    class Program
    {
        static void Main(string[] args)
        {
            Hero elf = new Hero(new ElfFactory());
            elf.Hit();
            elf.Run();

            Console.ReadLine();

            Hero human = new Hero(new HumanFactory());
            human.Hit();
            human.Run();
        }
    }
}
