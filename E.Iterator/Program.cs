using E.Iterator.Pattern;
using System;

namespace E.Iterator
{
    //Паттерн Итератор представляет абстрактный интерфейс для последовательного доступа ко всем элементам составного объекта без раскрытия его
    //внутренней структуры.


    //Пример. Вот есть у нас книги и библиотека, а так же читатель, который хочет получить инф-ю о книгах и для этого нужно очуществить перебор
    //объектов с помощью итератора. А теперь вспминаем про IEnumerator/IEnumerable для чего они нужны и что они делают. Так вот наши интрфейсы
    //IBookIterator/IBookNumerable делают что-то подобное, то есть IBookIterator определяет функционал для перебора, а IBookNumerable использует
    //IBookIterator для получения итератора для книг. Читатель же это клиент, который использует итератор для обхода объекта библиотеки.

    //Паттерн стоит использовать:
    // 1) Когда необходимо осуществить обход объекта без раскрытия его внутренней структуры.
    // 2) Когда имеется набор составных объектов, и надо обеспечить единый интерфейс для их перебора.
    // 3) Когда необходимо предоставить несколько альтернативных вариантов перебора одного и того же объекта.
    class Program
    {
        static void Main(string[] args)
        {
            Library library = new Library();
            Reader reader = new Reader();
            reader.SeeBooks(library);
            Console.WriteLine(library.Count);
        }
    }
}
