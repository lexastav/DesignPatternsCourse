using D.TemplateMethod.Pattern;
using System;

namespace D.TemplateMethod
{
    //Смысл паттерна шаблонный метод состоит в том, что, например, у нас есть несколько очень похожих класса, которые реализуют примерно общий алгоритм,
    //функциональность их общим сетом дублируется, шаблонный метод поможет этого дублирования избежать. Создается абстрактный класс, который описывает
    //общие черты и поведения и его наследуют конкретные классы.
    //Вот у нас есть школа и университет, понятное дело, что это два совершенно разных учебных заведения, но алгоритм у них примерно одинаков,
    //то есть человек и туда и туда поступает, учится, сдает экзамены, и тд и тп. Ну вот и заводим абстрактный класс, прописываем там абстрактные методы,
    //так как класс абстрактный а не интерфейс, реализовать пару методов мы таки можем, тогда это как бы будет у нас реализацией по умолчнию, только
    //метод это должен быть виртуальный, иначе мы не сможем его переопределить в наследниках. Ну и реализуем сразу метод с нашим алгоритмом.
    //В классах наследниках мы просто реализуем абстрактные методы базового класса.
    //таким образом данный паттерн стоит применять если:
    // 1) Планируется, что в будущем подклассы должны будут переопределять различные этапы алгоритма без изменения его структуры.
    // 2) Когда в классах, реализующим схожий алгоритм, происходит дублирование кода. Вынесение общего кода в шаблонный метод уменьшит его дублирование
    //    в подклассах.
    class Program
    {
        static void Main(string[] args)
        {
            School school = new School();
            University university = new University();

            school.Learn();
            university.Learn();
        }
    }
}
