using System;
using D.Prototype.Pattern;

namespace D.Prototype
{
    //Паттерн Прототип позволяет создавать объекты на основе уже ранее созданных объектов-прототипов. То есть по сути
    //данный паттерн предлагает технику клонирования объектов.

    //Мы определяем интерфейс для клонирования самого себя, который, как правило представляет метод Clone() и конкретные
    //реализации прототипа, которые этот метод реализует.

    //Вот предположим, что нам нужно где-то впрограмме несколько одинаковых прямоугольников или кругов, но создавать
    //новые мы нехотим, значит тогда заводим интерфейс IFigure (прототип) и сколько угодно классов с конкретной
    //реализацией этого интерфейса.

    //Для удобства .NET предляагает функционал для копирования в виде метода MemberwiseClone(), мы можем его использовать
    //на этапе реализации метода Clone() в конкретном классе (в Circle). Но есть один нюанс, MemberwiseClone()
    //осуществялет копирование только типов-значений, то есть неполное. Если класс содержит объекты ссылочных типов,
    //то оба объекта после клонирования содержали бы ссылку на один и тот же ссылочный объект. Реализация класса Circle
    //это наглядно демонстрирует. На практике такое поведение встречается гораздо чаще нежели "стерильная" классика ввиде
    //типов-значений. Вот что бы избежать такого поведения необходимо применить полное копирование, используя механизмы
    //бинарной сериализации (Circle2, Point2). И в этом случае все классы, объекты которых подлежат копированию,
    //должны быть помечены атрибутом Serializable.


    class Program
    {
        static void Main(string[] args)
        {
            IFigure figure = new Rectangle(30, 40);
            IFigure clonnedFigure = figure.Clone();
            figure.GetInfo();
            clonnedFigure.GetInfo();

            Console.ReadLine();

            figure = new Triangle(10, 10, 10);
            clonnedFigure = figure.Clone();
            figure.GetInfo();
            clonnedFigure.GetInfo();

            Console.ReadLine();

            Circle circle = new Circle(30, 40, 20);
            Circle clonnedCircle = circle.Clone() as Circle;
            circle.P.X = 100; //изменив координаты начальной фигуры они изменятся и для клонированной
            circle.GetInfo();
            clonnedCircle.GetInfo();

            Console.ReadLine();

            Circle2 circle2 = new Circle2(30, 10, 10);
            Circle2 clonnedCircle2 = circle2.DeepCopy() as Circle2;
            circle2.P.X = 100; //пытаемся изменить координаты
            circle2.GetInfo();
            clonnedCircle2.GetInfo(); //убеждаемся что координаты изменились только для объекта circle2
        }
    }
}
