using F.State.Pattern;
using F.State.Pattern.States;
using System;

namespace F.State
{
    class Program
    {
        //Паттерн состояние- шаблон проектирования, который позволяет объекту изменить свое поведение в зависиммости от внутреннего состояния.

        //Вот например вода может иметь 3 состояния: жидкое, твердое и газообразное. Вот у нас есть вода, она нагреваться и замораживаться,
        //мы декларируем это в интерфейсе методами, которые реализуют классы конкретных состояний. И стоит обратить внимание, что у воды есть свое
        //поведение, то есть мы не можем так просто взять из льда превратить воду в пар, то есть сначала наш лед станет жидкой водой, а уж потом
        //эту воду можно превратить в пар. Так же и пар нельзя сразу превратить в лед и тд. Вот как раз это поведение и вынесено в отдельные классы
        //состояний. Довольно просто все и при этом мы легко можем вносить изменения. Мы можем как и добавлять новые состояния так и классы состояний
        //можем использовать в других объектах.

        //Конечно мы могли бы реализовать все в рамках одного класса, загрузив методы нагревания и заморозки if/else или swtch конструкциями,
        //но это бы сделало программу перегруженой, плохочитаемой и плохо масштабируемой.

        //Короче говоря Паттерн Состояние стоит использовать:
        // 1) Когда поведение объекта должно зависеть от его состояния и может изменяться динамически во время выполнения.
        // 2) Когда в коде методов объекта используются многочисленные условные конструкции, выбор которых зависит от текущего состояния объекта
        static void Main(string[] args)
        {
            Water water = new Water(new LiquidWaterState());
            water.Heat();
            Console.ReadLine();
            water.Frost();
            Console.ReadLine();
            water.Frost();
            Console.ReadLine();
            water.Frost();

        }
    }
}
